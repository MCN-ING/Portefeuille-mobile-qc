diff --git a/App/components/listItems/NotificationListItem.tsx b/App/components/listItems/NotificationListItem.tsx
index 6c6844839e569d7855b72c0635457da37482c0d2..a71c9641dfcf85d5e43cb00e63e6397f65cf22ff 100644
--- a/App/components/listItems/NotificationListItem.tsx
+++ b/App/components/listItems/NotificationListItem.tsx
@@ -46,6 +46,8 @@ export interface NotificationListItemProps {
   notificationType: NotificationType
   notification: BasicMessageRecord | CredentialExchangeRecord | ProofExchangeRecord | CustomNotificationRecord
   customNotification?: CustomNotification
+  openSwipeableId: string | null
+  onOpenSwipeable: (id: string) => void
 }
 
 type DisplayDetails = {
@@ -91,8 +93,8 @@ const NotificationListItem: React.FC<NotificationListItemProps> = ({
   const [closeAction, setCloseAction] = useState<any>()
   const connectionId =
     notification instanceof BasicMessageRecord ||
-    notification instanceof CredentialExchangeRecord ||
-    notification instanceof ProofExchangeRecord
+      notification instanceof CredentialExchangeRecord ||
+      notification instanceof ProofExchangeRecord
       ? notification.connectionId ?? ''
       : ''
   const connection = useConnectionById(connectionId)
@@ -147,8 +149,8 @@ const NotificationListItem: React.FC<NotificationListItemProps> = ({
 
   const isReceivedProof = useMemo(() => {
     return notificationType === NotificationType.ProofRequest &&
-    ((notification as ProofExchangeRecord).state === ProofState.Done ||
-      (notification as ProofExchangeRecord).state === ProofState.PresentationSent)
+      ((notification as ProofExchangeRecord).state === ProofState.Done ||
+        (notification as ProofExchangeRecord).state === ProofState.PresentationSent)
   }, [notificationType, notification])
 
   const toggleDeclineModalVisible = useCallback(() => setDeclineModalVisible(prev => !prev), [])
@@ -273,7 +275,7 @@ const NotificationListItem: React.FC<NotificationListItemProps> = ({
           break
         }
         case NotificationType.Revocation:
-          details =  ({
+          details = ({
             type: InfoBoxType.Error,
             title: t('CredentialDetails.NewRevoked'),
             body: `${name + (version ? ` v${version}` : '')}`,
@@ -281,7 +283,7 @@ const NotificationListItem: React.FC<NotificationListItemProps> = ({
           })
           break
         case NotificationType.Custom:
-          details =  ({
+          details = ({
             type: InfoBoxType.Info,
             title: t(customNotification?.title as any),
             body: t(customNotification?.description as any),
@@ -441,18 +443,18 @@ const NotificationListItem: React.FC<NotificationListItemProps> = ({
           NotificationType.ProofRequest,
           NotificationType.CredentialOffer,
         ].includes(notificationType) && (
-          <View>
-            <TouchableOpacity
-              accessibilityLabel={t('Global.Dismiss')}
-              accessibilityRole={'button'}
-              testID={testIdWithKey(`Dismiss${notificationType}`)}
-              onPress={closeAction}
-              hitSlop={hitSlop}
-            >
-              <Icon name={'close'} size={iconSize} color={styleConfig.iconColor} />
-            </TouchableOpacity>
-          </View>
-        )}
+            <View>
+              <TouchableOpacity
+                accessibilityLabel={t('Global.Dismiss')}
+                accessibilityRole={'button'}
+                testID={testIdWithKey(`Dismiss${notificationType}`)}
+                onPress={closeAction}
+                hitSlop={hitSlop}
+              >
+                <Icon name={'close'} size={iconSize} color={styleConfig.iconColor} />
+              </TouchableOpacity>
+            </View>
+          )}
       </View>
       <View style={styles.bodyContainer}>
         <Text style={[styles.bodyText, styleConfig.textStyle]} testID={testIdWithKey('BodyText')}>
diff --git a/App/screens/Home.tsx b/App/screens/Home.tsx
index a514b5f64216055ddc0ce105bfe74d41959d34b6..8130e8f496cbec31111afe2314856b81c9848beb 100644
--- a/App/screens/Home.tsx
+++ b/App/screens/Home.tsx
@@ -41,6 +41,12 @@ const Home: React.FC<HomeProps> = () => {
   const [showTourPopup, setShowTourPopup] = useState(false)
   const screenIsFocused = useIsFocused()
 
+  const [notificationItemId, setNotificationItemId] = useState<string | null>(null)
+
+  const handleOpenSwipeable = (id: string | null) => {
+    setNotificationItemId(id)
+  }
+
   const styles = StyleSheet.create({
     flatlist: {
       marginBottom: 35,
@@ -50,23 +56,46 @@ const Home: React.FC<HomeProps> = () => {
   const DisplayListItemType = useCallback((item: any): React.ReactNode => {
     let component: React.ReactNode
     if (item.type === 'BasicMessageRecord') {
-      component = <NotificationListItem notificationType={NotificationType.BasicMessage} notification={item} />
+      component = (
+        <NotificationListItem
+          openSwipeableId={notificationItemId}
+          onOpenSwipeable={handleOpenSwipeable}
+          notificationType={NotificationType.BasicMessage}
+          notification={item}
+        />
+      )
     } else if (item.type === 'CredentialRecord') {
       let notificationType = NotificationType.CredentialOffer
       if (item.revocationNotification) {
         notificationType = NotificationType.Revocation
       }
-      component = <NotificationListItem notificationType={notificationType} notification={item} />
+      component = (
+        <NotificationListItem
+          openSwipeableId={notificationItemId}
+          onOpenSwipeable={handleOpenSwipeable}
+          notificationType={notificationType}
+          notification={item}
+        />
+      )
     } else if (item.type === 'CustomNotification' && customNotification) {
       component = (
         <NotificationListItem
+          openSwipeableId={notificationItemId}
+          onOpenSwipeable={handleOpenSwipeable}
           notificationType={NotificationType.Custom}
           notification={item}
           customNotification={customNotification}
         />
       )
     } else {
-      component = <NotificationListItem notificationType={NotificationType.ProofRequest} notification={item} />
+      component = (
+        <NotificationListItem
+          openSwipeableId={notificationItemId}
+          onOpenSwipeable={handleOpenSwipeable}
+          notificationType={NotificationType.ProofRequest}
+          notification={item}
+        />
+      )
     }
     return component
   }, [customNotification, NotificationListItem])
